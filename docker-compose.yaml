services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    networks:
      - backend
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 15000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    healthcheck:
      test: ["CMD", "nc", "-z", "kafka", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '9092:9092'
    networks:
      - backend
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 5
    ports:
      - '6379:6379'
    networks:
      - backend
      
#  eureka-server:
#    image: evseevdmitry/transport-ticket-eureka-server:0.9.0
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://eureka-server:8761/actuator/health" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    ports:
#      - '8761:8761'
#    networks:
#      - backend
#    depends_on:
#      kafka:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    environment:
#      - SERVER_PORT=8761
#      - eureka.instance.preferIpAddress=true
#
#  business-logic-db:
#    image: postgres:16.2
#    healthcheck:
#      test: ["CMD", "pg_isready"]
#      interval: 30s
#      timeout: 5s
#      retries: 5
#    ports:
#      - '5432:5432'
#    networks:
#      - backend
#    restart: unless-stopped
#    volumes:
#      - ./auth-service/infrastructure/db/create_db.sql:/docker-entrypoint-initdb.d/init_db.sql
#    environment:
#      POSTGRES_USER: ${BL_DATASOURCE_USERNAME}
#      POSTGRES_PASSWORD: ${BL_DATASOURCE_PASSWORD}
#      PGPORT: ${BL_DATASOURCE_PORT}
#
#  bl-service:
#    image: evseevdmitry/transport-ticket-bl-service:0.9.0
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://bl-service:8081/actuator/health" ]
#      interval: 30s
#      timeout: 5s
#      retries: 5
#    ports:
#      - '8081:8081'
#    networks:
#      - backend
#    depends_on:
#      business-logic-db:
#        condition: service_healthy
#      mail:
#        condition:
#    environment:
#      #         SPRING
#      - SERVER_PORT=8081
#      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka
#      #         DATASOURCE
#      - DATASOURCE_URL=${BL_DATASOURCE_URL}
#      - DATASOURCE_USERNAME=${BL_DATASOURCE_USERNAME}
#      - DATASOURCE_PASSWORD=${BL_DATASOURCE_PASSWORD}
#      #         JWT
#      - JWT_ACCESS_SECRET=${JWT_SECRET}
#      - JWT_ACCESS_LIFETIME=${JWT_ACCESS_LIFETIME}
#      - JWT_REFRESH_SECRET=${JWT_SECRET}
#      - JWT_REFRESH_LIFETIME=${JWT_REFRESH_LIFETIME}
#      #         KAFKA
#      - spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER}
#      #         REDIS
#      - SPRING_DATA_REDIS_DATABASE=${BL_REDIS_DATABASE}
#      - SPRING_DATA_REDIS_HOST=${REDIS_HOST}
#      - SPRING_DATA_REDIS_PORT=${REDIS_PORT}
#      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
#
#  purchased-ticket-db:
#    image: postgres:16.2
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 30s
#      timeout: 5s
#      retries: 5
#    ports:
#      - '5483:5433'
#    networks:
#      - backend
#    restart: unless-stopped
#    volumes:
#      - ./purchased-ticket-service/infrastructure/db/create_db.sql:/docker-entrypoint-initdb.d/init_db.sql
#    environment:
#      POSTGRES_USER: ${PURCHASED_TICKET_DATASOURCE_USERNAME}
#      POSTGRES_PASSWORD: ${PURCHASED_TICKET_DATASOURCE_PASSWORD}
#      PGPORT: ${PURCHASED_TICKET_DATASOURCE_PORT}
#
#  purchased-ticket-service:
#    image: evseevdmitry/transport-ticket-purchased-ticket-service:0.9.0
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://purchased-ticket-service:8082/actuator/health" ]
#      interval: 30s
#      timeout: 5s
#      retries: 5
#    ports:
#      - '8082:8082'
#    networks:
#      - backend
#    depends_on:
#      purchased-ticket-db:
#        condition: service_healthy
#      bl-service:
#        condition: service_healthy
#    environment:
#      #         SPRING
#      - SERVER_PORT=8082
#      - eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka
#      #         DATASOURCE
#      - DATASOURCE_URL=${BL_DATASOURCE_URL}
#      - DATASOURCE_USERNAME=${BL_DATASOURCE_USERNAME}
#      - DATASOURCE_PASSWORD=${BL_DATASOURCE_PASSWORD}
#      #         KAFKA
#      - spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVER}
  
networks:
  backend:
    driver: bridge